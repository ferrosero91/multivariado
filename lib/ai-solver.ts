// Servicio de IA para resolver ecuaciones matem√°ticas paso a paso
// Sistema multi-IA con fallback autom√°tico

interface SolutionStep {
  step: number
  description: string
  equation: string
  explanation: string
}

interface MathSolution {
  problem: string
  solution: string
  steps: SolutionStep[]
  type: string
  confidence: number
  provider?: string
}

interface AIProvider {
  name: string
  isAvailable: boolean
  priority: number
  solve: (problem: string) => Promise<MathSolution>
}

class AIMathSolver {
  private providers: AIProvider[] = []
  private groqApiKey: string | null = null
  private openRouterApiKey: string | null = null
  private huggingFaceApiKey: string | null = null

  constructor() {
    // Obtener API keys de variables de entorno
    this.groqApiKey = process.env.NEXT_PUBLIC_GROQ_API_KEY || null
    this.openRouterApiKey = process.env.NEXT_PUBLIC_OPENROUTER_API_KEY || null
    this.huggingFaceApiKey = process.env.NEXT_PUBLIC_HUGGINGFACE_API_KEY || null
    
    this.initializeProviders()
    
    if (typeof window !== 'undefined') {
      console.log('ü§ñ Multi-AI Math Solver initialized')
      this.logProviderStatus()
    }
  }

  private initializeProviders() {
    // Groq (Prioridad alta - muy r√°pido y preciso)
    this.providers.push({
      name: 'Groq',
      isAvailable: !!this.groqApiKey,
      priority: 1,
      solve: (problem: string) => this.solveWithGroq(problem)
    })

    // OpenRouter (Prioridad media - modelos gratuitos disponibles)
    this.providers.push({
      name: 'OpenRouter',
      isAvailable: true, // Tiene modelos gratuitos sin API key
      priority: 2,
      solve: (problem: string) => this.solveWithOpenRouter(problem)
    })

    // Hugging Face (Prioridad media - API gratuita)
    this.providers.push({
      name: 'Hugging Face',
      isAvailable: true, // API gratuita disponible
      priority: 3,
      solve: (problem: string) => this.solveWithHuggingFace(problem)
    })

    // Cohere (Prioridad baja - API gratuita limitada)
    this.providers.push({
      name: 'Cohere',
      isAvailable: true,
      priority: 4,
      solve: (problem: string) => this.solveWithCohere(problem)
    })

    // Ollama Local (Prioridad baja - requiere instalaci√≥n local)
    this.providers.push({
      name: 'Ollama Local',
      isAvailable: false, // Se detectar√° din√°micamente
      priority: 5,
      solve: (problem: string) => this.solveWithOllama(problem)
    })

    // Fallback Local (Siempre disponible)
    this.providers.push({
      name: 'Local Fallback',
      isAvailable: true,
      priority: 10,
      solve: (problem: string) => Promise.resolve(this.generateFallbackSolution(problem))
    })

    // Ordenar por prioridad
    this.providers.sort((a, b) => a.priority - b.priority)
  }

  private logProviderStatus() {
    console.log('üîß AI Providers Status:')
    this.providers.forEach(provider => {
      const status = provider.isAvailable ? '‚úÖ Disponible' : '‚ùå No disponible'
      console.log(`  ${provider.name}: ${status} (Prioridad: ${provider.priority})`)
    })
  }

  // M√©todo para verificar din√°micamente la disponibilidad de proveedores
  async checkProviderAvailability(): Promise<void> {
    console.log('üîç Checking provider availability...')
    
    // Verificar Ollama local
    try {
      const ollamaProvider = this.providers.find(p => p.name === 'Ollama Local')
      if (ollamaProvider) {
        const response = await fetch('http://localhost:11434/api/tags', {
          method: 'GET',
          signal: AbortSignal.timeout(2000)
        })
        ollamaProvider.isAvailable = response.ok
        console.log(`üè† Ollama Local: ${ollamaProvider.isAvailable ? '‚úÖ Available' : '‚ùå Not running'}`)
      }
    } catch (error) {
      const ollamaProvider = this.providers.find(p => p.name === 'Ollama Local')
      if (ollamaProvider) {
        ollamaProvider.isAvailable = false
      }
    }

    // Verificar otros proveedores con requests de prueba ligeros
    await this.testProviderConnectivity()
  }

  private async testProviderConnectivity(): Promise<void> {
    const testPromises = this.providers
      .filter(p => p.name !== 'Local Fallback' && p.name !== 'Ollama Local')
      .map(async (provider) => {
        try {
          // Test r√°pido de conectividad (sin resolver problema completo)
          const controller = new AbortController()
          const timeoutId = setTimeout(() => controller.abort(), 3000) // 3 segundos

          let testUrl = ''
          switch (provider.name) {
            case 'Groq':
              testUrl = 'https://api.groq.com/openai/v1/models'
              break
            case 'OpenRouter':
              testUrl = 'https://openrouter.ai/api/v1/models'
              break
            case 'Hugging Face':
              testUrl = 'https://api-inference.huggingface.co/models/gpt2'
              break
            case 'Cohere':
              testUrl = 'https://api.cohere.ai/v1/models'
              break
          }

          if (testUrl) {
            const response = await fetch(testUrl, {
              method: 'GET',
              signal: controller.signal,
              headers: {
                'Content-Type': 'application/json',
                ...(provider.name === 'Groq' && this.groqApiKey && { 'Authorization': `Bearer ${this.groqApiKey}` }),
                ...(provider.name === 'OpenRouter' && { 'HTTP-Referer': typeof window !== 'undefined' ? window.location.origin : 'http://localhost:3000' }),
                ...(provider.name === 'Hugging Face' && this.huggingFaceApiKey && { 'Authorization': `Bearer ${this.huggingFaceApiKey}` })
              }
            })

            clearTimeout(timeoutId)
            
            // Considerar disponible si responde (incluso con error de auth)
            provider.isAvailable = response.status < 500
            console.log(`üåê ${provider.name}: ${provider.isAvailable ? '‚úÖ Reachable' : '‚ùå Unreachable'} (${response.status})`)
          }
        } catch (error) {
          provider.isAvailable = false
          console.log(`üåê ${provider.name}: ‚ùå Connection failed`)
        }
      })

    await Promise.allSettled(testPromises)
  }

  async solveMathProblem(problem: string): Promise<MathSolution> {
    console.log('üîç Solving problem with multi-AI system:', problem)
    
    // Obtener proveedores disponibles ordenados por prioridad
    const availableProviders = this.providers.filter(p => p.isAvailable)
    
    console.log('üöÄ Available providers:', availableProviders.map(p => p.name).join(', '))
    
    // Intentar con cada proveedor en orden de prioridad
    for (const provider of availableProviders) {
      try {
        console.log(`üîÑ Trying ${provider.name}...`)
        
        const startTime = Date.now()
        const result = await Promise.race([
          provider.solve(problem),
          new Promise<never>((_, reject) => 
            setTimeout(() => reject(new Error('Timeout')), 15000) // 15 segundos timeout
          )
        ])
        
        const duration = Date.now() - startTime
        console.log(`‚úÖ ${provider.name} succeeded in ${duration}ms`)
        
        // Agregar informaci√≥n del proveedor al resultado
        result.provider = provider.name
        
        // Verificar calidad de la respuesta
        if (this.isValidSolution(result)) {
          return result
        } else {
          console.log(`‚ö†Ô∏è ${provider.name} returned invalid solution, trying next provider`)
          continue
        }
        
      } catch (error) {
        console.log(`‚ùå ${provider.name} failed:`, error instanceof Error ? error.message : 'Unknown error')
        
        // Si es el √∫ltimo proveedor disponible, no continuar
        if (provider === availableProviders[availableProviders.length - 1]) {
          console.log('üõ†Ô∏è All providers failed, using local fallback')
          break
        }
        
        continue
      }
    }
    
    // Si todos fallan, usar fallback local
    console.log('üîß Using local fallback solution')
    const fallback = this.generateFallbackSolution(problem)
    fallback.provider = 'Local Fallback'
    return fallback
  }

  private isValidSolution(solution: MathSolution): boolean {
    // Verificar que la soluci√≥n tenga contenido v√°lido
    return !!(
      solution.solution && 
      solution.solution.trim().length > 0 &&
      solution.steps && 
      solution.steps.length > 0 &&
      solution.solution !== 'Ver pasos para la soluci√≥n'
    )
  }

  private async solveWithGroq(problem: string): Promise<MathSolution> {
    console.log('üöÄ Starting Groq API call for:', problem)

    const prompt = `Eres un experto profesor de matem√°ticas especializado en c√°lculo multivariado, derivadas, integrales y ecuaciones diferenciales.

PROBLEMA: ${problem}

INSTRUCCIONES CR√çTICAS:
üö® ECUACIONES DIFERENCIALES: Si ves "dy" y "dx" es una ECUACI√ìN DIFERENCIAL
- Para 2x dy = (x + y) dx: separar variables o usar factor integrante
- NO solo dividir algebraicamente

üö® L√çMITES MULTIVARIADOS: Si ves lim con (x,y) ‚Üí (0,0)
- NUNCA apliques L'H√¥pital a l√≠mites multivariados
- DEBES verificar m√∫ltiples trayectorias
- Si diferentes trayectorias ‚Üí NO EXISTE

DETECCI√ìN DE TIPOS:
- "dy/dx" o "dy" y "dx" ‚Üí Ecuaci√≥n Diferencial
- "d/dx" ‚Üí Derivada
- "‚à´" ‚Üí Integral
- "lim(x,y)" ‚Üí L√≠mite Multivariado
- "x^2 + 3x" sin operador ‚Üí Derivada
- "=" con variables ‚Üí Ecuaci√≥n algebraica

METODOLOG√çA PARA ECUACIONES DIFERENCIALES:
1. Identificar tipo (separable, lineal, exacta)
2. Aplicar m√©todo apropiado
3. Integrar correctamente
4. Incluir constante de integraci√≥n

Responde SOLO con JSON v√°lido:
{
  "type": "tipo correcto del problema",
  "solution": "respuesta matem√°tica final",
  "steps": [
    {
      "step": 1,
      "description": "nombre del paso",
      "equation": "ecuaci√≥n matem√°tica",
      "explanation": "explicaci√≥n detallada del m√©todo"
    }
  ]
}

IMPORTANTE: Responde √öNICAMENTE el JSON, sin texto adicional.`

    // Lista de modelos disponibles en orden de preferencia
    const models = [
      'llama-3.1-8b-instant',
      'llama-3.1-70b-versatile', 
      'llama-3.2-3b-preview',
      'gemma2-9b-it'
    ]

    for (const model of models) {
      try {
        console.log(`üöÄ Trying model: ${model}`)

        const response = await fetch('https://api.groq.com/openai/v1/chat/completions', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${this.groqApiKey}`,
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            model: model,
            messages: [
              {
                role: 'system',
                content: 'Eres un profesor de matem√°ticas experto. Respondes √öNICAMENTE con JSON v√°lido, sin explicaciones adicionales.'
              },
              {
                role: 'user',
                content: prompt
              }
            ],
            temperature: 0.1,
            max_tokens: 1500,
          }),
        })

        console.log(`üìä Response status for ${model}:`, response.status)

        if (response.ok) {
          const data = await response.json()
          console.log(`‚úÖ Success with model: ${model}`)

          const content = data.choices?.[0]?.message?.content?.trim()

          if (!content) {
            console.error(`‚ùå No content in API response from ${model}`)
            continue
          }

          console.log('ü§ñ Groq response:', content)

          try {
            // Limpiar la respuesta para extraer solo el JSON
            const jsonMatch = content.match(/\{[\s\S]*\}/)
            const jsonString = jsonMatch ? jsonMatch[0] : content
            
            const parsed = JSON.parse(jsonString)
            
            return {
              problem,
              solution: parsed.solution || 'Ver pasos para la soluci√≥n',
              steps: parsed.steps || [],
              type: parsed.type || 'Matem√°ticas',
              confidence: 0.95
            }
          } catch (parseError) {
            console.error(`‚ùå Error parsing response from ${model}:`, parseError)
            console.log('üìù Raw content:', content)
            return this.parseTextResponse(problem, content)
          }
        } else {
          const errorText = await response.text()
          console.warn(`‚ö†Ô∏è Model ${model} failed:`, response.status, errorText)
          continue
        }
      } catch (error) {
        console.warn(`‚ö†Ô∏è Error with model ${model}:`, error)
        continue
      }
    }

    // Si todos los modelos fallan, lanzar error
    throw new Error('All Groq models failed or are unavailable')
  }

  private async solveWithCohere(problem: string): Promise<MathSolution> {
    console.log('üîÆ Using Cohere API')
    
    const prompt = `Eres un experto profesor de matem√°ticas especializado en c√°lculo multivariado, derivadas, integrales y ecuaciones diferenciales.

PROBLEMA: ${problem}

INSTRUCCIONES CR√çTICAS:
üö® ECUACIONES DIFERENCIALES: Si ves "dy" y "dx" es una ECUACI√ìN DIFERENCIAL
- Para 2x dy = (x + y) dx: separar variables o usar factor integrante
- NO solo dividir algebraicamente

üö® L√çMITES MULTIVARIADOS: Si ves lim con (x,y) ‚Üí (0,0)
- NUNCA apliques L'H√¥pital a l√≠mites multivariados
- DEBES verificar m√∫ltiples trayectorias

TIPOS:
- "dy" y "dx" ‚Üí Ecuaci√≥n Diferencial
- "d/dx" ‚Üí Derivada
- "lim(x,y)" ‚Üí L√≠mite Multivariado
- "x^2 + 3x" sin operador ‚Üí Derivada

Responde con JSON:
{
  "type": "tipo correcto",
  "solution": "respuesta final",
  "steps": [{"step": 1, "description": "paso", "equation": "ecuaci√≥n", "explanation": "explicaci√≥n"}]
}`

    const response = await fetch('https://api.cohere.ai/v1/generate', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${this.huggingFaceApiKey || 'demo-key'}`, // Usar demo key si no hay API key
      },
      body: JSON.stringify({
        model: 'command-light',
        prompt: prompt,
        max_tokens: 1000,
        temperature: 0.1,
        stop_sequences: ['}'],
      }),
    })

    if (response.ok) {
      const data = await response.json()
      const content = data.generations[0].text
      return this.parseTextResponse(problem, content)
    }

    throw new Error('Cohere API failed')
  }

  private async solveWithOllama(problem: string): Promise<MathSolution> {
    console.log('üè† Using Ollama Local')
    
    // Verificar si Ollama est√° disponible localmente
    try {
      const healthCheck = await fetch('http://localhost:11434/api/tags', {
        method: 'GET',
        signal: AbortSignal.timeout(2000) // 2 segundos timeout
      })
      
      if (!healthCheck.ok) {
        throw new Error('Ollama not available')
      }
    } catch (error) {
      throw new Error('Ollama local server not running')
    }

    const prompt = `Resuelve este problema matem√°tico paso a paso en espa√±ol: ${problem}

Si es una expresi√≥n como "x^2 + 3x + 1" sin operador, calcula la derivada.
Proporciona pasos detallados y la soluci√≥n final.`

    const response = await fetch('http://localhost:11434/api/generate', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'llama3.2:3b', // Modelo ligero
        prompt: prompt,
        stream: false,
        options: {
          temperature: 0.1,
          top_p: 0.9,
        }
      }),
    })

    if (response.ok) {
      const data = await response.json()
      return this.parseTextResponse(problem, data.response)
    }

    throw new Error('Ollama API failed')
  }

  private async solveWithOpenRouter(problem: string): Promise<MathSolution> {
    console.log('üåê Using OpenRouter API')
    
    const prompt = `Eres un experto profesor de matem√°ticas especializado en c√°lculo multivariado, derivadas, integrales y ecuaciones diferenciales.

PROBLEMA: ${problem}

INSTRUCCIONES CR√çTICAS:
üö® ECUACIONES DIFERENCIALES: Si ves "dy" y "dx" es una ECUACI√ìN DIFERENCIAL
- Para 2x dy = (x + y) dx: separar variables o usar factor integrante
- NO solo dividir algebraicamente

üö® L√çMITES MULTIVARIADOS: Si ves lim con (x,y) ‚Üí (0,0)
- NUNCA apliques L'H√¥pital a l√≠mites multivariados
- DEBES verificar m√∫ltiples trayectorias
- Si diferentes trayectorias ‚Üí NO EXISTE

DETECCI√ìN DE TIPOS:
- "dy/dx" o "dy" y "dx" ‚Üí Ecuaci√≥n Diferencial
- "d/dx" ‚Üí Derivada
- "‚à´" ‚Üí Integral
- "lim(x,y)" ‚Üí L√≠mite Multivariado
- "x^2 + 3x" sin operador ‚Üí Derivada
- "=" con variables ‚Üí Ecuaci√≥n algebraica

METODOLOG√çA PARA ECUACIONES DIFERENCIALES:
1. Identificar tipo (separable, lineal, exacta)
2. Aplicar m√©todo apropiado
3. Integrar correctamente
4. Incluir constante de integraci√≥n

Responde SOLO con JSON v√°lido:
{
  "type": "tipo correcto del problema",
  "solution": "respuesta matem√°tica final",
  "steps": [
    {
      "step": 1,
      "description": "nombre del paso",
      "equation": "ecuaci√≥n matem√°tica",
      "explanation": "explicaci√≥n detallada del m√©todo"
    }
  ]
}`

    // Lista de modelos gratuitos de OpenRouter
    const freeModels = [
      'meta-llama/llama-3.2-3b-instruct:free',
      'microsoft/phi-3-mini-128k-instruct:free',
      'google/gemma-2-9b-it:free',
      'qwen/qwen-2-7b-instruct:free'
    ]

    for (const model of freeModels) {
      try {
        console.log(`üîÑ Trying OpenRouter model: ${model}`)
        
        const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'HTTP-Referer': typeof window !== 'undefined' ? window.location.origin : 'http://localhost:3000',
            'X-Title': 'EasyCal Pro',
            ...(this.openRouterApiKey && { 'Authorization': `Bearer ${this.openRouterApiKey}` })
          },
          body: JSON.stringify({
            model: model,
            messages: [
              {
                role: 'system',
                content: 'Eres un profesor de matem√°ticas experto. Respondes √öNICAMENTE con JSON v√°lido.'
              },
              {
                role: 'user',
                content: prompt
              }
            ],
            temperature: 0.1,
            max_tokens: 1200,
          }),
        })

        if (response.ok) {
          const data = await response.json()
          const content = data.choices?.[0]?.message?.content?.trim()
          
          if (content) {
            console.log(`‚úÖ OpenRouter ${model} succeeded`)
            
            try {
              // Intentar parsear como JSON
              const jsonMatch = content.match(/\{[\s\S]*\}/)
              const jsonString = jsonMatch ? jsonMatch[0] : content
              const parsed = JSON.parse(jsonString)
              
              return {
                problem,
                solution: parsed.solution || 'Ver pasos para la soluci√≥n',
                steps: parsed.steps || [],
                type: parsed.type || 'Matem√°ticas',
                confidence: 0.85
              }
            } catch (parseError) {
              console.log(`‚ö†Ô∏è JSON parse failed for ${model}, using text parsing`)
              return this.parseTextResponse(problem, content)
            }
          }
        } else {
          console.log(`‚ùå OpenRouter ${model} failed:`, response.status)
          continue
        }
      } catch (error) {
        console.log(`‚ùå Error with OpenRouter ${model}:`, error)
        continue
      }
    }

    throw new Error('All OpenRouter models failed')
  }

  private async solveWithHuggingFace(problem: string): Promise<MathSolution> {
    console.log('ü§ó Using Hugging Face API')
    
    const prompt = `Eres un experto profesor de matem√°ticas. Resuelve paso a paso: ${problem}

INSTRUCCIONES CR√çTICAS:
üö® ECUACIONES DIFERENCIALES: Si ves "dy" y "dx" es una ECUACI√ìN DIFERENCIAL
- Para 2x dy = (x + y) dx: separar variables o usar factor integrante
- NO solo dividir algebraicamente

üö® L√çMITES MULTIVARIADOS: Si ves lim con (x,y) ‚Üí (0,0)
- NUNCA apliques L'H√¥pital a l√≠mites multivariados
- DEBES verificar m√∫ltiples trayectorias

TIPOS:
- "dy" y "dx" ‚Üí Ecuaci√≥n Diferencial
- "d/dx" ‚Üí Derivada  
- "lim(x,y)" ‚Üí L√≠mite Multivariado
- "x^2 + 3x" sin operador ‚Üí Derivada

Proporciona pasos detallados y soluci√≥n final correcta.`

    // Lista de modelos gratuitos de Hugging Face
    const models = [
      'microsoft/DialoGPT-medium',
      'facebook/blenderbot-400M-distill',
      'microsoft/DialoGPT-small',
      'google/flan-t5-base'
    ]

    for (const model of models) {
      try {
        console.log(`üîÑ Trying Hugging Face model: ${model}`)
        
        const response = await fetch(
          `https://api-inference.huggingface.co/models/${model}`,
          {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              ...(this.huggingFaceApiKey && { 'Authorization': `Bearer ${this.huggingFaceApiKey}` })
            },
            body: JSON.stringify({
              inputs: prompt,
              parameters: {
                max_length: 800,
                temperature: 0.1,
                do_sample: true,
                top_p: 0.9,
              },
              options: {
                wait_for_model: true,
                use_cache: false
              }
            }),
          }
        )

        if (response.ok) {
          const data = await response.json()
          
          // Manejar diferentes formatos de respuesta
          let content = ''
          if (Array.isArray(data) && data[0]?.generated_text) {
            content = data[0].generated_text
          } else if (data.generated_text) {
            content = data.generated_text
          } else if (typeof data === 'string') {
            content = data
          }
          
          if (content && content.trim().length > 0) {
            console.log(`‚úÖ Hugging Face ${model} succeeded`)
            return this.parseTextResponse(problem, content)
          }
        } else {
          const errorText = await response.text()
          console.log(`‚ùå Hugging Face ${model} failed:`, response.status, errorText)
          
          // Si el modelo est√° cargando, esperar un poco
          if (response.status === 503) {
            console.log('‚è≥ Model is loading, waiting...')
            await new Promise(resolve => setTimeout(resolve, 2000))
            continue
          }
        }
      } catch (error) {
        console.log(`‚ùå Error with Hugging Face ${model}:`, error)
        continue
      }
    }

    throw new Error('All Hugging Face models failed')
  }

  private parseTextResponse(problem: string, response: string): MathSolution {
    // Parsear respuesta de texto libre
    const lines = response.split('\n').filter(line => line.trim())
    const steps: SolutionStep[] = []
    let solution = ''
    let type = 'General'

    lines.forEach((line, index) => {
      if (line.toLowerCase().includes('soluci√≥n') || line.toLowerCase().includes('respuesta')) {
        solution = line.replace(/^.*?[:=]\s*/, '')
      } else if (line.match(/^\d+\./)) {
        steps.push({
          step: steps.length + 1,
          description: `Paso ${steps.length + 1}`,
          equation: line,
          explanation: line
        })
      }
    })

    return {
      problem,
      solution: solution || 'Ver pasos para la soluci√≥n',
      steps: steps.length > 0 ? steps : this.generateDefaultSteps(problem),
      type,
      confidence: 0.7
    }
  }

  private generateFallbackSolution(problem: string): MathSolution {
    // Generar soluci√≥n b√°sica basada en patrones comunes
    const type = this.detectProblemType(problem)
    const steps = this.generateDefaultSteps(problem)
    
    return {
      problem,
      solution: this.generateBasicSolution(problem, type),
      steps,
      type,
      confidence: 0.6
    }
  }

  private detectProblemType(problem: string): string {
    const lowerProblem = problem.toLowerCase()
    
    if (lowerProblem.includes('d/dx') || lowerProblem.includes('derivada')) {
      return 'C√°lculo Diferencial'
    } else if (lowerProblem.includes('‚à´') || lowerProblem.includes('integral')) {
      return 'C√°lculo Integral'
    } else if (lowerProblem.includes('lim') || lowerProblem.includes('l√≠mite')) {
      return 'L√≠mites'
    } else if (lowerProblem.includes('=') && lowerProblem.includes('x')) {
      return '√Ålgebra - Ecuaciones'
    } else if (lowerProblem.includes('sen') || lowerProblem.includes('cos') || lowerProblem.includes('tan')) {
      return 'Trigonometr√≠a'
    } else if (lowerProblem.includes('matriz') || lowerProblem.includes('determinante')) {
      return '√Ålgebra Lineal'
    } else if (/x\^?\d+|x\*|x\+|x\-/.test(lowerProblem) && !lowerProblem.includes('=')) {
      // Si contiene variables pero no ecuaciones, probablemente es para derivar
      return 'C√°lculo Diferencial'
    }
    
    return 'Matem√°ticas Generales'
  }

  private generateBasicSolution(problem: string, type: string): string {
    switch (type) {
      case 'C√°lculo Diferencial':
        return 'Aplicar reglas de derivaci√≥n'
      case 'C√°lculo Integral':
        return 'Aplicar t√©cnicas de integraci√≥n'
      case '√Ålgebra - Ecuaciones':
        return 'Despejar la variable x'
      default:
        return 'Resolver usando m√©todos matem√°ticos apropiados'
    }
  }

  private generateDefaultSteps(problem: string): SolutionStep[] {
    const type = this.detectProblemType(problem)
    
    switch (type) {
      case 'C√°lculo Diferencial':
        return [
          {
            step: 1,
            description: 'Identificar la funci√≥n a derivar',
            equation: problem,
            explanation: 'Analizamos la funci√≥n dada para determinar qu√© reglas de derivaci√≥n aplicar.'
          },
          {
            step: 2,
            description: 'Aplicar reglas de derivaci√≥n',
            equation: 'f\'(x) = ...',
            explanation: 'Aplicamos las reglas correspondientes (regla del producto, cadena, etc.).'
          },
          {
            step: 3,
            description: 'Simplificar el resultado',
            equation: 'Resultado final',
            explanation: 'Simplificamos la expresi√≥n obtenida para llegar al resultado final.'
          }
        ]
      
      case '√Ålgebra - Ecuaciones':
        return [
          {
            step: 1,
            description: 'Reorganizar la ecuaci√≥n',
            equation: problem,
            explanation: 'Movemos todos los t√©rminos con x a un lado y las constantes al otro.'
          },
          {
            step: 2,
            description: 'Simplificar t√©rminos semejantes',
            equation: 'Ecuaci√≥n simplificada',
            explanation: 'Combinamos t√©rminos similares para simplificar la ecuaci√≥n.'
          },
          {
            step: 3,
            description: 'Despejar x',
            equation: 'x = ...',
            explanation: 'Realizamos las operaciones necesarias para obtener el valor de x.'
          }
        ]
      
      default:
        return [
          {
            step: 1,
            description: 'Analizar el problema',
            equation: problem,
            explanation: 'Identificamos qu√© tipo de problema matem√°tico tenemos y qu√© m√©todo usar.'
          },
          {
            step: 2,
            description: 'Aplicar m√©todo de soluci√≥n',
            equation: 'Proceso de soluci√≥n',
            explanation: 'Aplicamos el m√©todo matem√°tico apropiado para resolver el problema.'
          },
          {
            step: 3,
            description: 'Verificar y concluir',
            equation: 'Resultado final',
            explanation: 'Verificamos nuestro resultado y presentamos la soluci√≥n final.'
          }
        ]
    }
  }

  // M√©todo para resolver problemas espec√≠ficos con l√≥gica local
  async solveSpecificProblem(problem: string): Promise<MathSolution> {
    const lowerProblem = problem.toLowerCase().trim()
    
    console.log('üîç Analyzing problem type:', problem)
    
    // Intentar primero con IA si est√° disponible
    if (this.groqApiKey) {
      try {
        console.log('ü§ñ Trying AI first...')
        const aiResult = await this.solveMathProblem(problem)
        
        // Verificar si la IA devolvi√≥ pasos v√°lidos
        if (aiResult.steps && aiResult.steps.length > 0) {
          console.log('‚úÖ AI returned valid steps:', aiResult.steps.length)
          return aiResult
        } else {
          console.log('‚ö†Ô∏è AI returned no steps, falling back to local logic')
        }
      } catch (error) {
        console.log('‚ö†Ô∏è AI failed, using local logic:', error)
      }
    }
    
    // Fallback a l√≥gica local con pasos detallados
    console.log('üõ†Ô∏è Using local logic for problem type detection')
    
    // Ecuaciones cuadr√°ticas
    if (this.isQuadraticEquation(problem)) {
      return this.solveQuadratic(problem)
    }
    
    // Derivadas expl√≠citas
    if (lowerProblem.includes('d/dx')) {
      return this.solveBasicDerivative(problem)
    }
    
    // Auto-detectar derivadas (expresiones con variables sin =)
    if (/x\^?\d+|x\*|x\+|x\-/.test(lowerProblem) && !lowerProblem.includes('=')) {
      console.log('üîç Auto-detected derivative problem')
      return this.solveBasicDerivative(`d/dx (${problem})`)
    }
    
    // Integrales b√°sicas
    if (lowerProblem.includes('‚à´')) {
      return this.solveBasicIntegral(problem)
    }
    
    // Fallback gen√©rico
    return this.generateFallbackSolution(problem)
  }

  private isQuadraticEquation(problem: string): boolean {
    return /x\^?2|x¬≤/.test(problem) && problem.includes('=')
  }

  private solveQuadratic(problem: string): MathSolution {
    // L√≥gica b√°sica para ecuaciones cuadr√°ticas
    return {
      problem,
      solution: 'x‚ÇÅ = ..., x‚ÇÇ = ...',
      steps: [
        {
          step: 1,
          description: 'Identificar coeficientes',
          equation: 'ax¬≤ + bx + c = 0',
          explanation: 'Identificamos los valores de a, b y c en la ecuaci√≥n cuadr√°tica.'
        },
        {
          step: 2,
          description: 'Aplicar f√≥rmula cuadr√°tica',
          equation: 'x = (-b ¬± ‚àö(b¬≤ - 4ac)) / 2a',
          explanation: 'Usamos la f√≥rmula cuadr√°tica para encontrar las soluciones.'
        },
        {
          step: 3,
          description: 'Calcular discriminante',
          equation: 'Œî = b¬≤ - 4ac',
          explanation: 'El discriminante nos dice cu√°ntas soluciones reales tiene la ecuaci√≥n.'
        },
        {
          step: 4,
          description: 'Obtener soluciones',
          equation: 'x‚ÇÅ = ..., x‚ÇÇ = ...',
          explanation: 'Calculamos las dos soluciones de la ecuaci√≥n cuadr√°tica.'
        }
      ],
      type: '√Ålgebra - Ecuaci√≥n Cuadr√°tica',
      confidence: 0.95
    }
  }

  private solveBasicDerivative(problem: string): MathSolution {
    // Extraer la funci√≥n del problema
    const functionMatch = problem.match(/d\/dx\s*\((.+)\)/) || problem.match(/d\/dx\s*(.+)/)
    const func = functionMatch ? functionMatch[1] : problem
    
    // Generar pasos b√°sicos para derivadas comunes
    let steps = []
    let solution = "f'(x) = ..."
    
    if (func.includes('x^2') || func.includes('x¬≤')) {
      // Calcular la derivada real
      let derivativeTerms = []
      
      // Manejar x^2 o x¬≤
      if (func.includes('x^2') || func.includes('x¬≤')) {
        derivativeTerms.push('2x')
      }
      
      // Manejar t√©rminos lineales como 3x
      const linearMatch = func.match(/([+-]?\s*\d*)\s*x(?!\^|¬≤)/g)
      if (linearMatch) {
        linearMatch.forEach(term => {
          const coeff = term.replace(/\s/g, '').replace('x', '') || '1'
          if (coeff !== '0') {
            derivativeTerms.push(coeff === '1' ? '1' : coeff === '-1' ? '-1' : coeff)
          }
        })
      }
      
      // Las constantes desaparecen en la derivada
      solution = derivativeTerms.length > 0 ? derivativeTerms.join(' + ').replace(/\+ -/g, '- ') : '0'
      
      steps = [
        {
          step: 1,
          description: 'Identificar t√©rminos',
          equation: `f(x) = ${func}`,
          explanation: 'Identificamos cada t√©rmino de la funci√≥n para aplicar las reglas de derivaci√≥n.'
        },
        {
          step: 2,
          description: 'Aplicar regla de potencias para x¬≤',
          equation: 'd/dx(x¬≤) = 2x',
          explanation: 'Para x¬≤, aplicamos la regla: d/dx(x‚Åø) = n¬∑x‚Åø‚Åª¬π, entonces d/dx(x¬≤) = 2x¬π = 2x'
        },
        {
          step: 3,
          description: 'Derivar t√©rminos lineales',
          equation: 'd/dx(ax) = a',
          explanation: 'La derivada de un t√©rmino lineal ax es simplemente el coeficiente a.'
        },
        {
          step: 4,
          description: 'Eliminar constantes',
          equation: 'd/dx(c) = 0',
          explanation: 'La derivada de cualquier constante es cero.'
        },
        {
          step: 5,
          description: 'Resultado final',
          equation: `f'(x) = ${solution}`,
          explanation: 'Combinamos todos los t√©rminos derivados para obtener la derivada final.'
        }
      ]
    } else if (func.includes('sin')) {
      solution = func.replace(/sin\(x\)/g, 'cos(x)')
      steps = [
        {
          step: 1,
          description: 'Identificar funci√≥n trigonom√©trica',
          equation: `f(x) = ${func}`,
          explanation: 'Tenemos una funci√≥n que contiene seno.'
        },
        {
          step: 2,
          description: 'Aplicar regla del seno',
          equation: 'd/dx(sin(x)) = cos(x)',
          explanation: 'La derivada del seno es el coseno.'
        },
        {
          step: 3,
          description: 'Resultado final',
          equation: `f'(x) = ${solution}`,
          explanation: 'La derivada de la funci√≥n es el coseno.'
        }
      ]
    } else {
      steps = [
        {
          step: 1,
          description: 'Identificar la funci√≥n',
          equation: `f(x) = ${func}`,
          explanation: 'Identificamos la funci√≥n que vamos a derivar.'
        },
        {
          step: 2,
          description: 'Aplicar reglas de derivaci√≥n',
          equation: 'f\'(x) = ...',
          explanation: 'Aplicamos las reglas de derivaci√≥n correspondientes seg√∫n el tipo de funci√≥n.'
        }
      ]
    }
    
    return {
      problem,
      solution,
      steps,
      type: 'C√°lculo Diferencial',
      confidence: 0.9
    }
  }

  private solveBasicIntegral(problem: string): MathSolution {
    return {
      problem,
      solution: '‚à´ f(x) dx = F(x) + C',
      steps: [
        {
          step: 1,
          description: 'Identificar la funci√≥n a integrar',
          equation: problem,
          explanation: 'Identificamos la funci√≥n que vamos a integrar.'
        },
        {
          step: 2,
          description: 'Aplicar t√©cnicas de integraci√≥n',
          equation: 'F(x) + C',
          explanation: 'Aplicamos las t√©cnicas de integraci√≥n apropiadas.'
        }
      ],
      type: 'C√°lculo Integral',
      confidence: 0.9
    }
  }
}

export const aiSolver = new AIMathSolver()
export type { MathSolution, SolutionStep }