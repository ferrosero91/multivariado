// Servicio de IA para resolver ecuaciones matem√°ticas paso a paso
// Usando APIs gratuitas como Groq, OpenRouter, o Hugging Face

interface SolutionStep {
  step: number
  description: string
  equation: string
  explanation: string
}

interface MathSolution {
  problem: string
  solution: string
  steps: SolutionStep[]
  type: string
  confidence: number
}

class AIMathSolver {
  private groqApiKey: string | null = null
  private groqBaseUrl: string = 'https://api.groq.com/openai/v1'
  private huggingFaceUrl: string = 'https://api-inference.huggingface.co'

  constructor() {
    // Obtener API keys de variables de entorno
    this.groqApiKey = process.env.NEXT_PUBLIC_GROQ_API_KEY || null
    
    if (typeof window !== 'undefined') {
      console.log('ü§ñ AI Math Solver initialized')
      console.log('üì° Groq API:', this.groqApiKey ? '‚úÖ Configured' : '‚ùå Not configured')
      if (this.groqApiKey) {
        console.log('üîë API Key preview:', this.groqApiKey.substring(0, 10) + '...')
      }
    }
  }

  async solveMathProblem(problem: string): Promise<MathSolution> {
    console.log('üîç Solving problem:', problem)
    
    try {
      // Intentar con Groq primero si tenemos API key
      if (this.groqApiKey) {
        console.log('üöÄ Using Groq API')
        return await this.solveWithGroq(problem)
      } else {
        console.log('üîÑ Using fallback methods')
        return await this.solveWithFallback(problem)
      }
    } catch (error) {
      console.error('‚ùå Error solving math problem:', error)
      console.log('üõ†Ô∏è Generating fallback solution')
      return this.generateFallbackSolution(problem)
    }
  }

  private async solveWithGroq(problem: string): Promise<MathSolution> {
    console.log('üöÄ Starting Groq API call for:', problem)

    const prompt = `Resuelve este problema matem√°tico paso a paso en espa√±ol:

PROBLEMA: ${problem}

INSTRUCCIONES ESPEC√çFICAS:
- Si es una expresi√≥n como "x^2 + 3x + 1" sin operador, asume que se pide la DERIVADA
- Si contiene "d/dx", calcula la derivada
- Si contiene "‚à´", calcula la integral
- Si contiene "=", resuelve la ecuaci√≥n
- Si contiene "lim", calcula el l√≠mite

Responde SOLO con un JSON v√°lido en este formato exacto:
{
  "type": "tipo de problema (ej: C√°lculo Diferencial, C√°lculo Integral, √Ålgebra, etc.)",
  "solution": "respuesta final clara y espec√≠fica",
  "steps": [
    {
      "step": 1,
      "description": "nombre del paso",
      "equation": "ecuaci√≥n o expresi√≥n matem√°tica",
      "explanation": "explicaci√≥n clara de qu√© se hace y por qu√©"
    }
  ]
}

IMPORTANTE: Responde √öNICAMENTE el JSON, sin texto adicional.`

    // Lista de modelos disponibles en orden de preferencia
    const models = [
      'llama-3.1-8b-instant',
      'llama-3.1-70b-versatile', 
      'llama-3.2-3b-preview',
      'gemma2-9b-it'
    ]

    for (const model of models) {
      try {
        console.log(`üöÄ Trying model: ${model}`)

        const response = await fetch(`${this.groqBaseUrl}/chat/completions`, {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${this.groqApiKey}`,
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            model: model,
            messages: [
              {
                role: 'system',
                content: 'Eres un profesor de matem√°ticas experto. Respondes √öNICAMENTE con JSON v√°lido, sin explicaciones adicionales.'
              },
              {
                role: 'user',
                content: prompt
              }
            ],
            temperature: 0.1,
            max_tokens: 1500,
          }),
        })

        console.log(`üìä Response status for ${model}:`, response.status)

        if (response.ok) {
          const data = await response.json()
          console.log(`‚úÖ Success with model: ${model}`)

          const content = data.choices?.[0]?.message?.content?.trim()

          if (!content) {
            console.error(`‚ùå No content in API response from ${model}`)
            continue
          }

          console.log('ü§ñ Groq response:', content)

          try {
            // Limpiar la respuesta para extraer solo el JSON
            const jsonMatch = content.match(/\{[\s\S]*\}/)
            const jsonString = jsonMatch ? jsonMatch[0] : content
            
            const parsed = JSON.parse(jsonString)
            
            return {
              problem,
              solution: parsed.solution || 'Ver pasos para la soluci√≥n',
              steps: parsed.steps || [],
              type: parsed.type || 'Matem√°ticas',
              confidence: 0.95
            }
          } catch (parseError) {
            console.error(`‚ùå Error parsing response from ${model}:`, parseError)
            console.log('üìù Raw content:', content)
            return this.parseTextResponse(problem, content)
          }
        } else {
          const errorText = await response.text()
          console.warn(`‚ö†Ô∏è Model ${model} failed:`, response.status, errorText)
          continue
        }
      } catch (error) {
        console.warn(`‚ö†Ô∏è Error with model ${model}:`, error)
        continue
      }
    }

    // Si todos los modelos fallan, lanzar error
    throw new Error('All Groq models failed or are unavailable')
  }

  private async solveWithFallback(problem: string): Promise<MathSolution> {
    console.log('ÔøΩ Terying fallback methods...')
    
    // Intentar con diferentes APIs gratuitas
    try {
      return await this.solveWithOpenRouter(problem)
    } catch (error) {
      console.log('‚ö†Ô∏è OpenRouter failed, trying Hugging Face...')
      try {
        return await this.solveWithHuggingFace(problem)
      } catch (error2) {
        console.log('‚ö†Ô∏è All APIs failed, using local logic...')
        return this.generateFallbackSolution(problem)
      }
    }
  }

  private async solveWithOpenRouter(problem: string): Promise<MathSolution> {
    // OpenRouter ofrece modelos gratuitos
    const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'HTTP-Referer': typeof window !== 'undefined' ? window.location.origin : 'http://localhost:3000',
        'X-Title': 'EasyCal Pro'
      },
      body: JSON.stringify({
        model: 'meta-llama/llama-3.2-3b-instruct:free',
        messages: [
          {
            role: 'system',
            content: 'Eres un profesor de matem√°ticas. Resuelve problemas paso a paso en espa√±ol.'
          },
          {
            role: 'user',
            content: `Resuelve paso a paso: ${problem}`
          }
        ],
        temperature: 0.1,
        max_tokens: 1000,
      }),
    })

    if (response.ok) {
      const data = await response.json()
      const content = data.choices[0].message.content
      return this.parseTextResponse(problem, content)
    }

    throw new Error('OpenRouter API failed')
  }

  private async solveWithHuggingFace(problem: string): Promise<MathSolution> {
    // Usar Hugging Face Inference API (gratuita)
    const response = await fetch(
      'https://api-inference.huggingface.co/models/microsoft/DialoGPT-medium',
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          inputs: `Resuelve paso a paso: ${problem}`,
          parameters: {
            max_length: 500,
            temperature: 0.1,
          },
        }),
      }
    )

    if (response.ok) {
      const data = await response.json()
      return this.parseTextResponse(problem, data[0]?.generated_text || '')
    }

    throw new Error('Hugging Face API failed')
  }

  private parseTextResponse(problem: string, response: string): MathSolution {
    // Parsear respuesta de texto libre
    const lines = response.split('\n').filter(line => line.trim())
    const steps: SolutionStep[] = []
    let solution = ''
    let type = 'General'

    lines.forEach((line, index) => {
      if (line.toLowerCase().includes('soluci√≥n') || line.toLowerCase().includes('respuesta')) {
        solution = line.replace(/^.*?[:=]\s*/, '')
      } else if (line.match(/^\d+\./)) {
        steps.push({
          step: steps.length + 1,
          description: `Paso ${steps.length + 1}`,
          equation: line,
          explanation: line
        })
      }
    })

    return {
      problem,
      solution: solution || 'Ver pasos para la soluci√≥n',
      steps: steps.length > 0 ? steps : this.generateDefaultSteps(problem),
      type,
      confidence: 0.7
    }
  }

  private generateFallbackSolution(problem: string): MathSolution {
    // Generar soluci√≥n b√°sica basada en patrones comunes
    const type = this.detectProblemType(problem)
    const steps = this.generateDefaultSteps(problem)
    
    return {
      problem,
      solution: this.generateBasicSolution(problem, type),
      steps,
      type,
      confidence: 0.6
    }
  }

  private detectProblemType(problem: string): string {
    const lowerProblem = problem.toLowerCase()
    
    if (lowerProblem.includes('d/dx') || lowerProblem.includes('derivada')) {
      return 'C√°lculo Diferencial'
    } else if (lowerProblem.includes('‚à´') || lowerProblem.includes('integral')) {
      return 'C√°lculo Integral'
    } else if (lowerProblem.includes('lim') || lowerProblem.includes('l√≠mite')) {
      return 'L√≠mites'
    } else if (lowerProblem.includes('=') && lowerProblem.includes('x')) {
      return '√Ålgebra - Ecuaciones'
    } else if (lowerProblem.includes('sen') || lowerProblem.includes('cos') || lowerProblem.includes('tan')) {
      return 'Trigonometr√≠a'
    } else if (lowerProblem.includes('matriz') || lowerProblem.includes('determinante')) {
      return '√Ålgebra Lineal'
    } else if (/x\^?\d+|x\*|x\+|x\-/.test(lowerProblem) && !lowerProblem.includes('=')) {
      // Si contiene variables pero no ecuaciones, probablemente es para derivar
      return 'C√°lculo Diferencial'
    }
    
    return 'Matem√°ticas Generales'
  }

  private generateBasicSolution(problem: string, type: string): string {
    switch (type) {
      case 'C√°lculo Diferencial':
        return 'Aplicar reglas de derivaci√≥n'
      case 'C√°lculo Integral':
        return 'Aplicar t√©cnicas de integraci√≥n'
      case '√Ålgebra - Ecuaciones':
        return 'Despejar la variable x'
      default:
        return 'Resolver usando m√©todos matem√°ticos apropiados'
    }
  }

  private generateDefaultSteps(problem: string): SolutionStep[] {
    const type = this.detectProblemType(problem)
    
    switch (type) {
      case 'C√°lculo Diferencial':
        return [
          {
            step: 1,
            description: 'Identificar la funci√≥n a derivar',
            equation: problem,
            explanation: 'Analizamos la funci√≥n dada para determinar qu√© reglas de derivaci√≥n aplicar.'
          },
          {
            step: 2,
            description: 'Aplicar reglas de derivaci√≥n',
            equation: 'f\'(x) = ...',
            explanation: 'Aplicamos las reglas correspondientes (regla del producto, cadena, etc.).'
          },
          {
            step: 3,
            description: 'Simplificar el resultado',
            equation: 'Resultado final',
            explanation: 'Simplificamos la expresi√≥n obtenida para llegar al resultado final.'
          }
        ]
      
      case '√Ålgebra - Ecuaciones':
        return [
          {
            step: 1,
            description: 'Reorganizar la ecuaci√≥n',
            equation: problem,
            explanation: 'Movemos todos los t√©rminos con x a un lado y las constantes al otro.'
          },
          {
            step: 2,
            description: 'Simplificar t√©rminos semejantes',
            equation: 'Ecuaci√≥n simplificada',
            explanation: 'Combinamos t√©rminos similares para simplificar la ecuaci√≥n.'
          },
          {
            step: 3,
            description: 'Despejar x',
            equation: 'x = ...',
            explanation: 'Realizamos las operaciones necesarias para obtener el valor de x.'
          }
        ]
      
      default:
        return [
          {
            step: 1,
            description: 'Analizar el problema',
            equation: problem,
            explanation: 'Identificamos qu√© tipo de problema matem√°tico tenemos y qu√© m√©todo usar.'
          },
          {
            step: 2,
            description: 'Aplicar m√©todo de soluci√≥n',
            equation: 'Proceso de soluci√≥n',
            explanation: 'Aplicamos el m√©todo matem√°tico apropiado para resolver el problema.'
          },
          {
            step: 3,
            description: 'Verificar y concluir',
            equation: 'Resultado final',
            explanation: 'Verificamos nuestro resultado y presentamos la soluci√≥n final.'
          }
        ]
    }
  }

  // M√©todo para resolver problemas espec√≠ficos con l√≥gica local
  async solveSpecificProblem(problem: string): Promise<MathSolution> {
    const lowerProblem = problem.toLowerCase().trim()
    
    console.log('üîç Analyzing problem type:', problem)
    
    // Intentar primero con IA si est√° disponible
    if (this.groqApiKey) {
      try {
        console.log('ü§ñ Trying AI first...')
        const aiResult = await this.solveMathProblem(problem)
        
        // Verificar si la IA devolvi√≥ pasos v√°lidos
        if (aiResult.steps && aiResult.steps.length > 0) {
          console.log('‚úÖ AI returned valid steps:', aiResult.steps.length)
          return aiResult
        } else {
          console.log('‚ö†Ô∏è AI returned no steps, falling back to local logic')
        }
      } catch (error) {
        console.log('‚ö†Ô∏è AI failed, using local logic:', error)
      }
    }
    
    // Fallback a l√≥gica local con pasos detallados
    console.log('üõ†Ô∏è Using local logic for problem type detection')
    
    // Ecuaciones cuadr√°ticas
    if (this.isQuadraticEquation(problem)) {
      return this.solveQuadratic(problem)
    }
    
    // Derivadas expl√≠citas
    if (lowerProblem.includes('d/dx')) {
      return this.solveBasicDerivative(problem)
    }
    
    // Auto-detectar derivadas (expresiones con variables sin =)
    if (/x\^?\d+|x\*|x\+|x\-/.test(lowerProblem) && !lowerProblem.includes('=')) {
      console.log('üîç Auto-detected derivative problem')
      return this.solveBasicDerivative(`d/dx (${problem})`)
    }
    
    // Integrales b√°sicas
    if (lowerProblem.includes('‚à´')) {
      return this.solveBasicIntegral(problem)
    }
    
    // Fallback gen√©rico
    return this.generateFallbackSolution(problem)
  }

  private isQuadraticEquation(problem: string): boolean {
    return /x\^?2|x¬≤/.test(problem) && problem.includes('=')
  }

  private solveQuadratic(problem: string): MathSolution {
    // L√≥gica b√°sica para ecuaciones cuadr√°ticas
    return {
      problem,
      solution: 'x‚ÇÅ = ..., x‚ÇÇ = ...',
      steps: [
        {
          step: 1,
          description: 'Identificar coeficientes',
          equation: 'ax¬≤ + bx + c = 0',
          explanation: 'Identificamos los valores de a, b y c en la ecuaci√≥n cuadr√°tica.'
        },
        {
          step: 2,
          description: 'Aplicar f√≥rmula cuadr√°tica',
          equation: 'x = (-b ¬± ‚àö(b¬≤ - 4ac)) / 2a',
          explanation: 'Usamos la f√≥rmula cuadr√°tica para encontrar las soluciones.'
        },
        {
          step: 3,
          description: 'Calcular discriminante',
          equation: 'Œî = b¬≤ - 4ac',
          explanation: 'El discriminante nos dice cu√°ntas soluciones reales tiene la ecuaci√≥n.'
        },
        {
          step: 4,
          description: 'Obtener soluciones',
          equation: 'x‚ÇÅ = ..., x‚ÇÇ = ...',
          explanation: 'Calculamos las dos soluciones de la ecuaci√≥n cuadr√°tica.'
        }
      ],
      type: '√Ålgebra - Ecuaci√≥n Cuadr√°tica',
      confidence: 0.95
    }
  }

  private solveBasicDerivative(problem: string): MathSolution {
    // Extraer la funci√≥n del problema
    const functionMatch = problem.match(/d\/dx\s*\((.+)\)/) || problem.match(/d\/dx\s*(.+)/)
    const func = functionMatch ? functionMatch[1] : problem
    
    // Generar pasos b√°sicos para derivadas comunes
    let steps = []
    let solution = "f'(x) = ..."
    
    if (func.includes('x^2') || func.includes('x¬≤')) {
      // Calcular la derivada real
      let derivativeTerms = []
      
      // Manejar x^2 o x¬≤
      if (func.includes('x^2') || func.includes('x¬≤')) {
        derivativeTerms.push('2x')
      }
      
      // Manejar t√©rminos lineales como 3x
      const linearMatch = func.match(/([+-]?\s*\d*)\s*x(?!\^|¬≤)/g)
      if (linearMatch) {
        linearMatch.forEach(term => {
          const coeff = term.replace(/\s/g, '').replace('x', '') || '1'
          if (coeff !== '0') {
            derivativeTerms.push(coeff === '1' ? '1' : coeff === '-1' ? '-1' : coeff)
          }
        })
      }
      
      // Las constantes desaparecen en la derivada
      solution = derivativeTerms.length > 0 ? derivativeTerms.join(' + ').replace(/\+ -/g, '- ') : '0'
      
      steps = [
        {
          step: 1,
          description: 'Identificar t√©rminos',
          equation: `f(x) = ${func}`,
          explanation: 'Identificamos cada t√©rmino de la funci√≥n para aplicar las reglas de derivaci√≥n.'
        },
        {
          step: 2,
          description: 'Aplicar regla de potencias para x¬≤',
          equation: 'd/dx(x¬≤) = 2x',
          explanation: 'Para x¬≤, aplicamos la regla: d/dx(x‚Åø) = n¬∑x‚Åø‚Åª¬π, entonces d/dx(x¬≤) = 2x¬π = 2x'
        },
        {
          step: 3,
          description: 'Derivar t√©rminos lineales',
          equation: 'd/dx(ax) = a',
          explanation: 'La derivada de un t√©rmino lineal ax es simplemente el coeficiente a.'
        },
        {
          step: 4,
          description: 'Eliminar constantes',
          equation: 'd/dx(c) = 0',
          explanation: 'La derivada de cualquier constante es cero.'
        },
        {
          step: 5,
          description: 'Resultado final',
          equation: `f'(x) = ${solution}`,
          explanation: 'Combinamos todos los t√©rminos derivados para obtener la derivada final.'
        }
      ]
    } else if (func.includes('sin')) {
      solution = func.replace(/sin\(x\)/g, 'cos(x)')
      steps = [
        {
          step: 1,
          description: 'Identificar funci√≥n trigonom√©trica',
          equation: `f(x) = ${func}`,
          explanation: 'Tenemos una funci√≥n que contiene seno.'
        },
        {
          step: 2,
          description: 'Aplicar regla del seno',
          equation: 'd/dx(sin(x)) = cos(x)',
          explanation: 'La derivada del seno es el coseno.'
        },
        {
          step: 3,
          description: 'Resultado final',
          equation: `f'(x) = ${solution}`,
          explanation: 'La derivada de la funci√≥n es el coseno.'
        }
      ]
    } else {
      steps = [
        {
          step: 1,
          description: 'Identificar la funci√≥n',
          equation: `f(x) = ${func}`,
          explanation: 'Identificamos la funci√≥n que vamos a derivar.'
        },
        {
          step: 2,
          description: 'Aplicar reglas de derivaci√≥n',
          equation: 'f\'(x) = ...',
          explanation: 'Aplicamos las reglas de derivaci√≥n correspondientes seg√∫n el tipo de funci√≥n.'
        }
      ]
    }
    
    return {
      problem,
      solution,
      steps,
      type: 'C√°lculo Diferencial',
      confidence: 0.9
    }
  }

  private solveBasicIntegral(problem: string): MathSolution {
    return {
      problem,
      solution: '‚à´ f(x) dx = F(x) + C',
      steps: [
        {
          step: 1,
          description: 'Identificar la funci√≥n a integrar',
          equation: problem,
          explanation: 'Identificamos la funci√≥n que vamos a integrar.'
        },
        {
          step: 2,
          description: 'Aplicar t√©cnicas de integraci√≥n',
          equation: 'F(x) + C',
          explanation: 'Aplicamos las t√©cnicas de integraci√≥n apropiadas.'
        }
      ],
      type: 'C√°lculo Integral',
      confidence: 0.9
    }
  }
}

export const aiSolver = new AIMathSolver()
export type { MathSolution, SolutionStep }