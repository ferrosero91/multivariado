"use client"

import React, { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { 
  Calculator, 
  FunctionSquare, 
  Sigma, 
  Pi, 
  Infinity,
  ChevronDown,
  ChevronUp
} from "lucide-react"

interface MathKeyboardProps {
  onSymbolClick: (symbol: string) => void
  isVisible: boolean
  onToggle: () => void
}

interface MathSymbol {
  symbol: string
  label: string
  description?: string
}

const mathCategories = {
  basic: {
    name: "B√°sicos",
    icon: Calculator,
    color: "bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-300",
    symbols: [
      { symbol: "¬≤", label: "x¬≤" },
      { symbol: "¬≥", label: "x¬≥" },
      { symbol: "^", label: "^" },
      { symbol: "‚àö", label: "‚àö" },
      { symbol: "‚àõ", label: "‚àõ" },
      { symbol: "¬±", label: "¬±" },
      { symbol: "√∑", label: "√∑" },
      { symbol: "√ó", label: "√ó" },
      { symbol: "‚â†", label: "‚â†" },
      { symbol: "‚âà", label: "‚âà" },
      { symbol: "‚â§", label: "‚â§" },
      { symbol: "‚â•", label: "‚â•" }
    ]
  },
  functions: {
    name: "Funciones",
    icon: FunctionSquare,
    color: "bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-300",
    symbols: [
      { symbol: "sin", label: "sin" },
      { symbol: "cos", label: "cos" },
      { symbol: "tan", label: "tan" },
      { symbol: "cot", label: "cot" },
      { symbol: "sec", label: "sec" },
      { symbol: "csc", label: "csc" },
      { symbol: "arcsin", label: "arcsin" },
      { symbol: "arccos", label: "arccos" },
      { symbol: "arctan", label: "arctan" },
      { symbol: "sinh", label: "sinh" },
      { symbol: "cosh", label: "cosh" },
      { symbol: "tanh", label: "tanh" },
      { symbol: "ln", label: "ln" },
      { symbol: "log", label: "log" },
      { symbol: "exp", label: "exp" },
      { symbol: "abs", label: "|x|" }
    ]
  },
  calculus: {
    name: "C√°lculo",
    icon: Sigma,
    color: "bg-purple-100 text-purple-800 dark:bg-purple-900/20 dark:text-purple-300",
    symbols: [
      { symbol: "‚à´", label: "‚à´", description: "Integral" },
      { symbol: "‚à¨", label: "‚à¨", description: "Integral doble" },
      { symbol: "‚à≠", label: "‚à≠", description: "Integral triple" },
      { symbol: "‚àÆ", label: "‚àÆ", description: "Integral de l√≠nea" },
      { symbol: "d/dx", label: "d/dx", description: "Derivada" },
      { symbol: "‚àÇ/‚àÇx", label: "‚àÇ/‚àÇx", description: "Derivada parcial" },
      { symbol: "‚àá", label: "‚àá", description: "Gradiente" },
      { symbol: "Œ£", label: "Œ£", description: "Sumatoria" },
      { symbol: "‚àè", label: "‚àè", description: "Productoria" },
      { symbol: "lim", label: "lim", description: "L√≠mite" },
      { symbol: "‚Üí", label: "‚Üí", description: "Tiende a" },
      { symbol: "‚àû", label: "‚àû", description: "Infinito" }
    ]
  },
  greek: {
    name: "Griegas",
    icon: Pi,
    color: "bg-orange-100 text-orange-800 dark:bg-orange-900/20 dark:text-orange-300",
    symbols: [
      { symbol: "Œ±", label: "Œ±" },
      { symbol: "Œ≤", label: "Œ≤" },
      { symbol: "Œ≥", label: "Œ≥" },
      { symbol: "Œ¥", label: "Œ¥" },
      { symbol: "Œµ", label: "Œµ" },
      { symbol: "Œ∏", label: "Œ∏" },
      { symbol: "Œª", label: "Œª" },
      { symbol: "Œº", label: "Œº" },
      { symbol: "œÄ", label: "œÄ" },
      { symbol: "œÉ", label: "œÉ" },
      { symbol: "œÑ", label: "œÑ" },
      { symbol: "œÜ", label: "œÜ" },
      { symbol: "œà", label: "œà" },
      { symbol: "œâ", label: "œâ" },
      { symbol: "Œî", label: "Œî" },
      { symbol: "Œò", label: "Œò" },
      { symbol: "Œõ", label: "Œõ" },
      { symbol: "Œ£", label: "Œ£" },
      { symbol: "Œ¶", label: "Œ¶" },
      { symbol: "Œ©", label: "Œ©" }
    ]
  },
  sets: {
    name: "Conjuntos",
    icon: Infinity,
    color: "bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-300",
    symbols: [
      { symbol: "‚àà", label: "‚àà", description: "Pertenece" },
      { symbol: "‚àâ", label: "‚àâ", description: "No pertenece" },
      { symbol: "‚äÇ", label: "‚äÇ", description: "Subconjunto" },
      { symbol: "‚äÜ", label: "‚äÜ", description: "Subconjunto o igual" },
      { symbol: "‚à™", label: "‚à™", description: "Uni√≥n" },
      { symbol: "‚à©", label: "‚à©", description: "Intersecci√≥n" },
      { symbol: "‚àÖ", label: "‚àÖ", description: "Conjunto vac√≠o" },
      { symbol: "‚Ñù", label: "‚Ñù", description: "N√∫meros reales" },
      { symbol: "‚Ñï", label: "‚Ñï", description: "N√∫meros naturales" },
      { symbol: "‚Ñ§", label: "‚Ñ§", description: "N√∫meros enteros" },
      { symbol: "‚Ñö", label: "‚Ñö", description: "N√∫meros racionales" },
      { symbol: "‚ÑÇ", label: "‚ÑÇ", description: "N√∫meros complejos" }
    ]
  }
}

export default function MathKeyboard({ onSymbolClick, isVisible, onToggle }: MathKeyboardProps) {
  const [activeCategory, setActiveCategory] = useState<keyof typeof mathCategories>('basic')

  const handleSymbolClick = (symbol: string) => {
    onSymbolClick(symbol)
  }

  if (!isVisible) {
    return (
      <div className="flex justify-center mt-2">
        <Button 
          variant="outline" 
          size="sm" 
          onClick={onToggle}
          className="flex items-center gap-2 text-sm"
        >
          <Calculator className="h-4 w-4" />
          Mostrar Teclado Matem√°tico
          <ChevronDown className="h-3 w-3" />
        </Button>
      </div>
    )
  }

  const currentCategory = mathCategories[activeCategory]

  return (
    <Card className="mt-4 border-2 border-blue-200 dark:border-blue-800 shadow-lg">
      <CardContent className="p-4">
        <div className="flex items-center justify-between mb-4">
          <h3 className="text-lg font-semibold flex items-center gap-2">
            <Calculator className="h-5 w-5" />
            Teclado Matem√°tico
          </h3>
          <Button 
            variant="ghost" 
            size="sm" 
            onClick={onToggle}
            className="flex items-center gap-1"
          >
            Ocultar
            <ChevronUp className="h-3 w-3" />
          </Button>
        </div>

        {/* Categor√≠as */}
        <div className="flex flex-wrap gap-2 mb-4">
          {Object.entries(mathCategories).map(([key, category]) => {
            const IconComponent = category.icon
            const isActive = activeCategory === key
            return (
              <Badge
                key={key}
                variant={isActive ? "default" : "secondary"}
                className={`cursor-pointer px-3 py-2 flex items-center gap-2 ${
                  isActive ? "bg-blue-600 text-white" : category.color
                }`}
                onClick={() => setActiveCategory(key as keyof typeof mathCategories)}
              >
                <IconComponent className="h-4 w-4" />
                {category.name}
              </Badge>
            )
          })}
        </div>

        {/* S√≠mbolos */}
        <div className="grid grid-cols-6 sm:grid-cols-8 md:grid-cols-10 lg:grid-cols-12 gap-2">
          {currentCategory.symbols.map((item, index) => (
            <Button
              key={index}
              variant="outline"
              size="sm"
              className="h-12 w-12 text-lg font-mono hover:bg-blue-50 hover:border-blue-300 dark:hover:bg-blue-900/20 dark:hover:border-blue-600 transition-colors"
              onClick={() => handleSymbolClick(item.symbol)}
              title={item.description || item.label}
            >
              {item.label}
            </Button>
          ))}
        </div>

        {/* Instrucciones */}
        <div className="mt-4 p-3 bg-gray-50 dark:bg-gray-800 rounded-lg">
          <p className="text-sm text-gray-600 dark:text-gray-400">
            üí° <strong>Tip:</strong> Haz clic en cualquier s√≠mbolo para agregarlo a tu ecuaci√≥n. 
            Puedes combinar s√≠mbolos para crear expresiones complejas como l√≠mites multivariados.
          </p>
        </div>
      </CardContent>
    </Card>
  )
}
